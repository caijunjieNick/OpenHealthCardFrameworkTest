// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios12.1-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ASN1Kit
import DataKit
import Foundation
import GemCommonsKit
import Swift
import _Concurrency
public protocol ASN1EncodableType {
  func asn1encode(tag: ASN1Kit.ASN1DecodedTag?) throws -> ASN1Kit.ASN1Object
}
public protocol ASN1DecodableType {
  init(from asn1: ASN1Kit.ASN1Object) throws
}
public typealias ASN1CodableType = ASN1Kit.ASN1DecodableType & ASN1Kit.ASN1EncodableType
public enum ASN1Data {
  case primitive(Foundation.Data)
  case constructed([ASN1Kit.ASN1Object])
  public var length: Swift.Int {
    get
  }
  public var items: [ASN1Kit.ASN1Object]? {
    get
  }
  public var primitive: Foundation.Data? {
    get
  }
}
extension ASN1Kit.ASN1Data {
  public func fold<T>(_ primitive: @escaping (Foundation.Data) throws -> T, _ constructed: ([ASN1Kit.ASN1Object]) throws -> T) rethrows -> T
}
public enum ASN1DecodedTag : Swift.Equatable {
  case applicationTag(Swift.UInt)
  case taggedTag(Swift.UInt)
  case universal(ASN1Kit.ASN1Tag)
  case privateTag(Swift.UInt)
  public static func == (a: ASN1Kit.ASN1DecodedTag, b: ASN1Kit.ASN1DecodedTag) -> Swift.Bool
}
extension ASN1Kit.ASN1DecodedTag {
  public var isApplicationSpecific: Swift.Bool {
    get
  }
  public var isContextSpecific: Swift.Bool {
    get
  }
  public var isUniversal: Swift.Bool {
    get
  }
}
@_hasMissingDesignatedInitializers public class ASN1Decoder {
  public class func decode(asn1 data: Foundation.Data) throws -> ASN1Kit.ASN1Object
  @objc deinit
}
public enum ASN1Error : Swift.Error, Swift.Equatable {
  case malformedEncoding(Swift.String)
  case unsupported(Swift.String)
  case internalError(Swift.String)
  case internalInconsistency(Swift.String)
  public static func == (a: ASN1Kit.ASN1Error, b: ASN1Kit.ASN1Error) -> Swift.Bool
}
public struct ASN1Int {
  public var intValue: Swift.Int? {
    get
  }
  public var rawInt: Foundation.Data {
    get
  }
}
extension ASN1Kit.ASN1Int : ASN1Kit.ASN1CodableType {
  public init(from asn1: ASN1Kit.ASN1Object) throws
  public func asn1encode(tag: ASN1Kit.ASN1DecodedTag?) throws -> ASN1Kit.ASN1Object
}
extension ASN1Kit.ASN1Object {
  public func wrap(with tag: ASN1Kit.ASN1DecodedTag, constructed: Swift.Bool = true) -> ASN1Kit.ASN1Object
}
extension ASN1Kit.ASN1Object {
  public func serialize() throws -> Foundation.Data
}
extension ASN1Kit.ASN1Object {
  public subscript(tag: ASN1Kit.ASN1DecodedTag) -> ASN1Kit.ASN1Object? {
    get
  }
}
public protocol ASN1Object {
  var tag: ASN1Kit.ASN1DecodedTag { get }
  var data: ASN1Kit.ASN1Data { get }
  var length: Swift.Int { get }
  var constructed: Swift.Bool { get }
}
extension ASN1Kit.ASN1Object {
  public var tagNo: Swift.UInt? {
    get
  }
}
public func create(tag: ASN1Kit.ASN1DecodedTag, data: ASN1Kit.ASN1Data) -> ASN1Kit.ASN1Object
extension ASN1Kit.ASN1Data : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension ASN1Kit.ASN1Data : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension ASN1Kit.ASN1DecodedTag : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension ASN1Kit.ASN1DecodedTag : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public enum ASN1Tag : Swift.UInt8 {
  case implicit
  case boolean
  case integer
  case bitString
  case octetString
  case null
  case objectIdentifier
  case external
  case enumerated
  case sequence
  case set
  case numericString
  case printableString
  case t61String
  case videotexString
  case ia5String
  case utcTime
  case generalizedTime
  case graphicString
  case visibleString
  case generalString
  case universalString
  case bmpString
  case utf8String
  case relativeOID
  case time
  public static let universal: Swift.UInt8
  public static let constructed: Swift.UInt8
  public static let application: Swift.UInt8
  public static let `private`: Swift.UInt8
  public static let tagged: Swift.UInt8
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
extension Swift.Array : ASN1Kit.ASN1DecodableType where Element == ASN1Kit.ASN1Object {
  public init(from asn1: ASN1Kit.ASN1Object) throws
}
extension Swift.Sequence where Self.Element == ASN1Kit.ASN1EncodableType {
  public func asn1encode(tag: ASN1Kit.ASN1DecodedTag? = nil) throws -> ASN1Kit.ASN1Object
}
extension Swift.Bool : ASN1Kit.ASN1CodableType {
  public init(from asn1: ASN1Kit.ASN1Object) throws
  public static func asn1decoded(_ object: ASN1Kit.ASN1Object) throws -> Swift.Bool
  public func asn1encode(tag: ASN1Kit.ASN1DecodedTag? = nil) throws -> ASN1Kit.ASN1Object
}
extension Foundation.Data : ASN1Kit.ASN1CodableType {
  public init(from asn1: ASN1Kit.ASN1Object) throws
  public init(bitString: Foundation.Data) throws
  public static func asn1decoded(_ object: ASN1Kit.ASN1Object) throws -> Foundation.Data
  public func asn1encode(tag: ASN1Kit.ASN1DecodedTag? = nil) -> ASN1Kit.ASN1Object
  public func asn1bitStringEncode(unused bits: Swift.Int = 0, tag: ASN1Kit.ASN1DecodedTag? = nil) throws -> ASN1Kit.ASN1Object
}
extension Foundation.Data {
  public var asn1integer: Swift.Int? {
    get
  }
}
extension Foundation.Data {
  public var unsignedIntValue: Swift.UInt? {
    get
  }
}
extension Foundation.Date : ASN1Kit.ASN1CodableType {
  public init(from asn1: ASN1Kit.ASN1Object) throws
  public static func asn1decoded(_ object: ASN1Kit.ASN1Object) throws -> Foundation.Date
  public func asn1encode(tag: ASN1Kit.ASN1DecodedTag? = nil) throws -> ASN1Kit.ASN1Object
}
@_hasMissingDesignatedInitializers public class GeneralizedTimeDateFormatter {
  public static func date(from generalizedTime: Swift.String) -> Foundation.Date?
  @objc deinit
}
extension Swift.Int : ASN1Kit.ASN1EncodableType {
  public func asn1encode(tag: ASN1Kit.ASN1DecodedTag?) throws -> ASN1Kit.ASN1Object
}
public struct ObjectIdentifier : Swift.Equatable, Swift.Hashable {
  public let rawValue: Swift.String
  public static func from(string: Swift.String) throws -> ASN1Kit.ObjectIdentifier
  public static func == (a: ASN1Kit.ObjectIdentifier, b: ASN1Kit.ObjectIdentifier) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ASN1Kit.ObjectIdentifier : ASN1Kit.ASN1CodableType {
  public func asn1encode(tag: ASN1Kit.ASN1DecodedTag? = nil) throws -> ASN1Kit.ASN1Object
  public init(from asn1: ASN1Kit.ASN1Object) throws
}
extension Swift.String {
  public var characterSet: Swift.Set<Swift.Character> {
    get
  }
}
extension Foundation.OutputStream {
  public func write(byte: Swift.UInt8) -> Swift.Int
}
extension Swift.String : ASN1Kit.ASN1CodableType {
  public func asn1encode(tag: ASN1Kit.ASN1DecodedTag?) throws -> ASN1Kit.ASN1Object
  public init(from asn1: ASN1Kit.ASN1Object) throws
}
extension ASN1Kit.ASN1Tag : Swift.Equatable {}
extension ASN1Kit.ASN1Tag : Swift.Hashable {}
extension ASN1Kit.ASN1Tag : Swift.RawRepresentable {}
