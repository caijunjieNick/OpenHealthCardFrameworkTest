// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name DataKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import Swift
import _Concurrency
import _StringProcessing
extension Swift.Array where Element == Swift.UInt8 {
  public var data: Foundation.Data {
    get
  }
}
public enum Base64 {
  case standard
  case urlSafe
  public enum Mode {
    case failOnInvalidCharacters
    case ignoreWhiteSpaceAndNewline
    case ignoreInvalidCharacters
    public func decodedLength(_ data: Foundation.Data) -> Swift.Int
    public static func == (a: DataKit.Base64.Mode, b: DataKit.Base64.Mode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Padding {
    case none
    case padding
    public func encodedLength(_ data: Foundation.Data, lineFeeds: Swift.Int = 0) -> Swift.Int
    public static func == (a: DataKit.Base64.Padding, b: DataKit.Base64.Padding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Error : Swift.Error {
    case invalidBase64String
    public static func == (a: DataKit.Base64.Error, b: DataKit.Base64.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func encode(data: Foundation.Data, with padding: DataKit.Base64.Padding = .padding, lineFeeds: Swift.Int = 0) -> Foundation.Data
  public static func decode(string: Swift.String, mode: DataKit.Base64.Mode = .failOnInvalidCharacters) throws -> Foundation.Data
  public static func decode(data: Foundation.Data, mode: DataKit.Base64.Mode = .failOnInvalidCharacters) throws -> Foundation.Data
  public static func == (a: DataKit.Base64, b: DataKit.Base64) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Foundation.Data {
  public var asciiString: Swift.String? {
    get
  }
}
extension Foundation.Data {
  public func hexString(separator: Swift.String = "") -> Swift.String
  public init(hex: Swift.String) throws
}
public enum HexStringParsingError : Swift.Error, Swift.Equatable {
  case illegalCharacters(pattern: Swift.String, index: Swift.Int, literal: Swift.String)
  case invalidLength(Swift.Int)
  case unknownError
  public static func == (a: DataKit.HexStringParsingError, b: DataKit.HexStringParsingError) -> Swift.Bool
}
extension Foundation.Data {
  public var utf8string: Swift.String? {
    get
  }
}
extension DataKit.Base64 : Swift.Equatable {}
extension DataKit.Base64 : Swift.Hashable {}
extension DataKit.Base64.Mode : Swift.Equatable {}
extension DataKit.Base64.Mode : Swift.Hashable {}
extension DataKit.Base64.Padding : Swift.Equatable {}
extension DataKit.Base64.Padding : Swift.Hashable {}
extension DataKit.Base64.Error : Swift.Equatable {}
extension DataKit.Base64.Error : Swift.Hashable {}
